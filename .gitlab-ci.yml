workflow:
  rules:
    - if: $CI_MERGE_REQUEST_ID # Execute jobs in merge request context
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "web" # manual run via GitLab UI

stages:
  - build
  - lint
  - test

.python-cache: &python-cache
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .venv/
      - .cache/pip
      - .cache/pypoetry

.python-job-template: &python-job-template
  image: docker.io/library/python:${PYTHON_VERSION}
  before_script:
    - python --version
    - pip install poetry
    - poetry --version
    - poetry config virtualenvs.in-project true
    - poetry install -v
  <<: *python-cache
  variables:
    PROJECT: src
  parallel:
    matrix:
      - PYTHON_VERSION: ["3.8"]

isort:
  <<: *python-job-template
  stage: build
  needs: []
  script:
    - poetry run isort **/*.py -c -v --profile black

black:
  <<: *python-job-template
  stage: build
  needs: []
  script:
    - poetry run black --check .

mypy:
  <<: *python-job-template
  stage: lint
  script:
    - poetry run mypy $PROJECT tests

pylint:
  <<: *python-job-template
  stage: lint
  script:
    - poetry run pylint $PROJECT
  needs:
    - isort
    - black

ruff:
  <<: *python-job-template
  stage: lint
  script:
    - poetry run ruff .
  needs:
    - isort
    - black

unit-test:
  <<: *python-job-template
  stage: test
  needs:
    - isort
    - black
  script:
    - make test
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    when: always
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
      junit: report.xml
    paths:
      - cov_html
